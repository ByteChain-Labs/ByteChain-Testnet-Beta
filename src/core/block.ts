import { hashBlock }  from '../utils/crypto';
import buildMerkleTree from '../utils/merkle_tree';
import Transaction from './transaction';

const MiningDifficulty = 3;

// Block class
class Block {
    nonce: number;
    blockHeight: number;
    timestamp: number;
    transactions: Transaction[];
    trxCount: number;
    merkleroot: string;
    prevBlockHash: string;
    blockHash: string;

    constructor (blockHeight: number, transactions: Transaction[], trxCount: number, prevBlockHash: string) {
        this.nonce = 0;
        this.blockHeight = blockHeight;
        this.timestamp = Date.now();
        this.transactions = transactions;
        this.trxCount = trxCount;
        this.merkleroot = '';
        this.prevBlockHash = prevBlockHash;
        this.blockHash = '';
    }

    //Method to hash a block 
    BlockHash() {
        const blockDataAsString = `${this.blockHeight}${this.nonce}${JSON.stringify(this.transactions)}${this.merkleroot}${this.prevBlockHash}`;
        this.blockHash = hashBlock(blockDataAsString);
        return this.blockHash;
    }

   // Validating the hash generated by HashBlock() using Proof of Work(PoW);
    ProofOfWork() {
        this.merkleroot = this.CalculateMerkleRoot();
        while (true) {
            this.BlockHash();
            if (this.BlockHash().substring(0, MiningDifficulty) === '0'.repeat(MiningDifficulty)) {
                break;
            }
            this.nonce++;
        };
        return this.nonce;
    } 

    CalculateMerkleRoot() {
        if (this.transactions.length === 0) {
            return '';
        }

        return buildMerkleTree(this.transactions);
    }

    ContainValidTransactions() {
        for (const transaction of this.transactions) {
            if (!(transaction instanceof Transaction)) {
                throw new Error('Invalid transaction instance');
            }
            //            TODO
            // if (!transaction.IsValidTransaction()) {
            //     return false;
            // }
        }
        return true;
    }
}


export default Block;